#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""This function is used to generate a batch shell script 
for filtering miRAW prediction result files.
Those files needs to be either in the original folder of miRAW predition
or in a single folder

This code is used in the follwoing format

    python filepath1/cutoffBatch.py -f filepath2/cutoffFilter.py -t targetFolder -e batchfilename -o(optional) -P value -E value
    
-f to indicate which function will be applied to miRAW predictions
-e to name the generated batch file
-t to indicate where are the files to be processed
-o to indicate whether the files to be processed are still in the original folder generated by miRAW

**-t is up to where the files to be processed
*if they are in the original folder, just indicate the folder containing all the predication cases
*otherwise, indicate the absolute path of the folder where the files are stored
**-o is optional, 
*if the files stay in the original folder generated by miRAW, just use it at the end
*else the files to be processed needs to be put in the same foler

"""

import argparse
import sys
import os
import logging
import datetime
from os import listdir
from os.path import isfile, join


__author__ = "Yafei Xing"
__copyright__ = "Copyright 2018, AMG-OUS"
__version__ = "1.0.1"
__maintainer__ = "Yafei Xing"
__email__ = "yafei.xing@medisin.uio.no"
__status__ = "Production"


MY_NEWLINE = "\n"
if os.name== "Windows":
    MY_NEWLINE ="\r\n"


logging.getLogger().setLevel(logging.INFO)


parser = argparse.ArgumentParser(description='set up batch commands to run cutoff filtering')

parser.add_argument("-e", "--exptName", dest='exptName',
                    help="specify name for the process")

parser.add_argument("-t", "--targetFolder", dest='targetFolder',
                    help="folder path for miRAW output and new output")

parser.add_argument("-f", "--funcLoc", dest='functionLocation',
                    help="location of the cutoffFilter.py file")

parser.add_argument("-H", "--HelpMe", action="store_true",
                    help="print detailed help")

parser.add_argument("-o","--originalFolder",dest='fileTail',
                    help="to indicate whether the files are still in the original folder")

parser.add_argument("-P","--probCutoff",dest='probabilityCutoff',
                    help="to indicate whether the files will be filetered by prediction probability")

parser.add_argument("-E","--enerCutoff",dest='energyCutoff',
                    help="to indicate whether the files will be filetered by free energy")

args = parser.parse_args()


def printLongHelpAndExit():
    logging.info("+" + "-" * 78 + "+")
    logging.info("+  cuttoffBatch:                                                               +")
    logging.info("+    wrapper code for generating scripts to run cutoffFilter.py                +")
    logging.info("+                                                                              +")
    logging.info("+    you need to specify:                                                      +")
    logging.info("+                                                                              +")
    logging.info("+      a name for the batch file: (-e/--exptName)                              +")
    logging.info("+                                                                              +")
    logging.info("+      a target folder to read and write:           (-t/--targetFolder)        +")
    logging.info("+                                                                              +")
    logging.info("+      the location of the cutoffFilter.py file          (-f/--funcLoc)        +")
    logging.info("+                                                                              +")
    logging.info("+      use -o if the file(s) are in the original folder  (-o/--originalFolder) +")
    logging.info("+      also indicate the tail of the files to be processed                     +")
    logging.info("+      e.g., .positiveTargetSites.csv                                          +")
    logging.info("+                                                                              +")
    logging.info("+      the cutoff value for prediction probability        (-P/--probCutoff)    +")
    logging.info("+                                                                              +")
    logging.info("+      the cutoff value for free energy                   (-E/--enerCutoff)    +")
    logging.info("+                                                                              +")
    logging.info("+" + "-" * 78 + "+")


def printHelpAndExit():
    parser.print_help()
    logging.info("stopping")
    sys.exit()


def checkProgramLocation():

    global funcLocation
    if args.functionLocation:
        funcLocation =  args.functionLocation
    logging.info("program location is at <" + funcLocation + ">")


def checkExptName():
    
    logging.info("checking Name for the batch file:" )
    
    if args.exptName:
        logging.info(args.exptName)
        logging.info("--OK")
    else:
        logging.error("----you need to specify a name for the script using the -e/--exptName parameter")
        printHelpAndExit()


def checkBindingEnergyCutOff():
    logging.info("checkBindingEnergyCutOff") 
    
    if args.energyCutoff:
        logging.info(args.energyCutoff)
        if float(args.energyCutoff) <= 0.0:
            logging.info("--OK")
        else:
            logging.info(" binding energy cutoff (-e) needs to be less than 0" + str(args.energyCutoff) + ">")
            return()
    else:
        logging.info("No free energy filter")

def checkProbCutOff():
    logging.info("checkProbabilityCutOff") 
    
    if args.probabilityCutoff:
        logging.info(args.probabilityCutoff)
        if( abs(float(args.probabilityCutoff)) >= 0.0 and abs(float(args.probabilityCutoff)) <= 1.0):
            logging.info("--OK") 
        else:
            logging.info(" the probability cutoff (-P) needs to be between 0 and 1" + str(args.probCutoff) + ">")
            return()
    else:
        logging.info("No probability filter")
    


def checkOutFolder():
    
    logging.info("checking target folder:")
    scriptFolder = os.path.dirname(os.path.abspath(__file__))#current absolute path
    
    if args.targetFolder:
        if args.targetFolder[0]== '.': # is the file path a relative path (does it start with a '.' ?)
            args.targetFolder=args.targetFolder.strip()
        
        if not os.path.isdir(args.targetFolder):
            args.targetFolder = os.path.join(scriptFolder, args.targetFolder)
            
        
        if not os.path.isdir(args.targetFolder):
            logging.error("--the folder doesn't exist, can't continue. Try checking the specified path")
            logging.info("--stopping")
            sys.exit()           
    else:
        logging.error("----you need to specify an output folder using the -o/--outFolder parameter")
        printHelpAndExit()

    logging.info("--OK")


def checkArgs():
    
    if args.HelpMe :
        printLongHelpAndExit()
        exit()
    checkProgramLocation()
    checkExptName()
    checkOutFolder()
    checkBindingEnergyCutOff()
    checkProbCutOff()


def writeScript():

    #python cutoffFilter.py -f filepath/file -P value -E value
    with open(os.path.join(args.targetFolder, args.exptName  + '.sh'), "w") as f:
        if args.fileTail:
            for foldername in next(os.walk(args.targetFolder))[1]:
                folderpath = os.path.join(args.targetFolder, foldername)
                content = "python " + funcLocation + " -f " + folderpath + "/" + foldername + args.fileTail
                if args.probabilityCutoff:
                    content = content + " -P " + args.probabilityCutoff
                if args.energyCutoff:
                    content = content + " -E " + args.energyCutoff
                f.write(content + MY_NEWLINE)
        else:

            filenames = [file for file in listdir(args.targetFolder) if isfile(join(args.targetFolder,file)) and file[-4:]=='.csv']
        
            for file in filenames:
                content = "python " + funcLocation + " -f " + join(args.targetFolder,file)
                if args.probabilityCutoff:
                    content = content + " -P " + args.probabilityCutoff
                if args.energyCutoff:
                    content = content + " -E " + args.energyCutoff
                f.write(content + MY_NEWLINE)



checkArgs()
writeScript()



